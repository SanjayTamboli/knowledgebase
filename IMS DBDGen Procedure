```markdown
# IMS DBDGEN Procedure

This document outlines the steps and parameters for performing a Database Definition Generation (DBDGEN) in IBM IMS (Information Management System).

## 1. Purpose of DBDGEN

The IMS DBDGEN utility is used to define the physical and logical structure of an IMS database. It takes source statements written in IMS control language and generates a Database Descriptor (DBD) block. This DBD block is then stored in the IMS DBD library (ACBLIB after ACBGEN) and is used by IMS to understand how to access and manage the data within the database.

## 2. Prerequisites

*   IMS Control Language source for the DBD (typically stored in a PDS member).
*   Access to an IMS system.
*   JCL (Job Control Language) for executing the DBDGEN utility.
*   Appropriate authorization to submit jobs and update IMS libraries.

## 3. DBDGEN JCL Example

Below is a typical JCL structure for executing the IMS DBDGEN utility.

```jcl
//DBDGEN JOB (ACCT), 'DBDGEN', MSGCLASS=H, CLASS=A, NOTIFY=&SYSUID
//*********************************************************************
//*    IMS DBDGEN PROCEDURE                                           *
//*********************************************************************
//DBDGEN   EXEC PGM=DFSRRC00,                                         
//         PARM='ULU,DFSDSG00,,,,,,,,,,,,Y,N'                        
//STEPLIB  DD DSN=IMS.SDFSRESL,DISP=SHR                               
//         DD DSN=IMS.SDFSRESL,DISP=SHR  <-- If IMS.SDFSRESL is not APF authorized
//DFSRESLB DD DSN=IMS.SDFSRESL,DISP=SHR                               
//SYSPRINT DD SYSOUT=*                                                
//SYSUDUMP DD SYSOUT=*                                                
//IMS      DD DSN=IMS.DBDLIB,DISP=OLD     <-- Output DBD library      
//SYSIN    DD *                                                       
*DBDNAME   NAME=YOURDBD                                               
*SEGM      NAME=ROOTSEG,PARENT=0,BYTES=100                            
*FIELD     NAME=(ROOTKEY,SEQ,U),BYTES=10,START=1,TYPE=C               
*LCHILD    NAME=(CHILDSEG,YOURPSB),POINTER=SNGL                       
*DATASET   DD1=YOURDDN,DEVICE=3390,SIZE=P                             
*DBDGEN                                                               
*FINISH                                                               
/*                                                                    
//YOURDDN  DD DSN=YOUR.DATABASE.DATASET,DISP=OLD,UNIT=SYSDA,VOL=SER=VOLSER
```

## 4. Key JCL Components Explained

*   **`EXEC PGM=DFSRRC00, PARM='ULU,DFSDSG00,,,,,,,,,,,,Y,N'`**:
    *   `DFSRRC00`: The IMS region controller.
    *   `ULU`: Specifies that a utility program will be run.
    *   `DFSDSG00`: The actual DBDGEN utility program.
    *   The remaining commas are placeholders for other IMS parameters. `Y` typically enables some debugging, `N` disables others.
*   **`STEPLIB DD DSN=IMS.SDFSRESL,DISP=SHR`**:
    *   Points to the IMS SDFSRESL library, which contains the IMS executable modules. This library must be APF-authorized.
*   **`DFSRESLB DD DSN=IMS.SDFSRESL,DISP=SHR`**:
    *   Another reference to the IMS SDFSRESL library, often required for certain IMS components.
*   **`SYSPRINT DD SYSOUT=*`**:
    *   Specifies that the utility's output listing (messages, statistics) should go to the system output.
*   **`SYSUDUMP DD SYSOUT=*`**:
    *   Specifies where an abnormal termination (abend) dump should be written.
*   **`IMS DD DSN=IMS.DBDLIB,DISP=OLD`**:
    *   **Crucial:** This DD statement points to the IMS DBD library where the generated DBD block will be stored. `DISP=OLD` ensures exclusive access during the update.
*   **`SYSIN DD *`**:
    *   Indicates that the IMS control statements for the DBDGEN follow directly in the JCL. Alternatively, `DD DSN=YOUR.DBD.SOURCE(MEMBER),DISP=SHR` can be used to reference a PDS member.
*   **`YOURDDN DD DSN=YOUR.DATABASE.DATASET,DISP=OLD,UNIT=SYSDA,VOL=SER=VOLSER`**:
    *   This DD statement is an example of a `DATASET` DD statement defined within the `DBDGEN` source. It defines the physical dataset that the database will use. The name `YOURDDN` must match the `DD1` parameter in the `DATASET` statement of your DBD source.
    *   **Note:** If your database uses multiple datasets (e.g., for different areas in a DEDB), you will need corresponding `DD` statements for each `DD1`, `DD2`, etc., in your JCL.

## 5. DBD Control Statement Explanation (within SYSIN)

The `SYSIN` section contains the actual IMS control statements that define your database structure.

*   **`DBDNAME NAME=YOURDBD,ACCESS=HDAM,...`**:
    *   Defines the DBD name (YOURDBD) and the database access method (e.g., HDAM, HIDAM, DEDB, GSAM, HSAM, INDEX). Other parameters like `EXIT=`, `RMNAME=`, `PASSWD=`, etc., are also defined here.
*   **`SEGM NAME=ROOTSEG,PARENT=0,BYTES=100,...`**:
    *   Defines a segment. `NAME` is the segment name, `PARENT=0` indicates it's a root segment. `BYTES` is the maximum length of the segment. Other parameters include `PTR=`, `PROT=`, `FREQ=`.
*   **`FIELD NAME=(ROOTKEY,SEQ,U),BYTES=10,START=1,TYPE=C,...`**:
    *   Defines a field within a segment.
    *   `NAME=(ROOTKEY,SEQ,U)`: Field name is ROOTKEY, it's a `SEQ`uence field (key), and `U` (unique) means no duplicate keys allowed for this segment.
    *   `BYTES`: Length of the field.
    *   `START`: Starting position within the segment (1-relative).
    *   `TYPE`: Data type (e.g., C for character, X for hexadecimal, P for packed decimal, Z for zoned decimal, B for binary).
*   **`LCHILD NAME=(CHILDSEG,YOURPSB),POINTER=SNGL,...`**:
    *   Defines a logical child segment, linking to a physical segment defined in another DBD.
    *   `NAME=(CHILDSEG,YOURPSB)`: The logical child name and the PSB name where the parent is defined (for logical relationships).
    *   `POINTER`: Specifies the type of pointer used (e.g., SNGL, DBLE, SYM).
*   **`DATASET DD1=YOURDDN,DEVICE=3390,SIZE=P,...`**:
    *   Defines the physical dataset characteristics for the database.
    *   `DD1=YOURDDN`: The DDNAME that must correspond to a JCL DD statement.
    *   `DEVICE`: Type of DASD device (e.g., 3390).
    *   `SIZE=P`: Primary data set group (for HDAM/HIDAM, DEDBs can have multiple areas).
*   **`DBDGEN`**:
    *   Signals the end of the DBD definition statements and initiates the generation process.
*   **`FINISH`**:
    *   Signals the end of the entire DBDGEN utility input.

## 6. Execution Steps

1.  **Prepare the DBD Source**: Ensure your IMS control statements for the DBD are correct and complete.
2.  **Assemble JCL**: Customize the provided JCL example with your specific library names, DBD name, DDNAMEs, and dataset names.
3.  **Submit the Job**: Submit the JCL job to the MVS system.
4.  **Verify Output**:
    *   Check the `SYSPRINT` output for any error messages (e.g., `DFS0570I` for successful completion, `DFS0570W` for warnings, `DFS0570E` for errors).
    *   Ensure the return code of the job step is `0000` or `0004` (warnings are acceptable, but investigate them).
    *   Confirm that the DBD block has been successfully stored in the `IMS.DBDLIB`.

## 7. Post-DBDGEN Steps

After a successful DBDGEN, you typically need to perform the following:

1.  **ACBGEN (Application Control Block Generation)**: If your database uses ACBs, you must run ACBGEN to combine the DBD with relevant PSBs into an Application Control Block that IMS can load.
    *   **JCL Example:** (Simplified)
        ```jcl
        //ACBGEN   EXEC PGM=DFSRRC00,PARM='ULU,DFSUACB0,,,,,,,,,,,,Y,N'
        //STEPLIB  DD DSN=IMS.SDFSRESL,DISP=SHR
        //DFSRESLB DD DSN=IMS.SDFSRESL,DISP=SHR
        //SYSPRINT DD SYSOUT=*
        //SYSUDUMP DD SYSOUT=*
        //IMSLIB   DD DSN=IMS.DBDLIB,DISP=SHR  <-- Input DBD library
        //         DD DSN=IMS.PSBLIB,DISP=SHR  <-- Input PSB library
        //IMSACB   DD DSN=IMS.ACBLIB,DISP=OLD <-- Output ACB library
        //SYSIN    DD *
        BUILD DBD=YOURDBD,PSB=YOURPSB1,PSB=YOURPSB2,...
        BUILD PSB=ANOTHERPSB
        END
        /*
        ```
    *   **Note**: If you modify a DBD, all PSBs referencing that DBD *must* be re-ACBGENed.
2.  **Database Initialization/Load**: For new databases, you will need to initialize the datasets and potentially load initial data using a utility or an application program.
3.  **IMS System Restart/Online Change**:
    *   If IMS is running, you may need to perform an IMS cold start or an online change (OLC) to make the new or modified DBD effective in the active IMS system.
    *   For a cold start, ensure all affected databases are stopped and then restart IMS.
    *   For OLC, the process is more complex and involves preparing new ACBLIB datasets and issuing OLC commands.

## 8. Troubleshooting Common Issues

*   **JCL Errors**: Typographical errors in DD names, DSNs, or DISP parameters.
*   **DBD Control Statement Errors**: Incorrect syntax, missing parameters, or logical inconsistencies in the database definition.
*   **Library Access Issues**: Incorrect DSNs for `STEPLIB`, `DFSRESLB`, `IMS`, or `IMSACB`, or insufficient authority to write to these libraries.
*   **Return Code 8 or 12**: Indicates severe errors. Review `SYSPRINT` output carefully for diagnostic messages.
*   **Insufficient Space**: If writing to a new library or extending an existing one, ensure sufficient DASD space.

## 9. Example of a Simple HDAM DBD

Here's a basic example for an HDAM database.

```jcl
//DBDHDAM JOB (IMS),'HDAMDBD',MSGCLASS=H,CLASS=A
//STEP1    EXEC PGM=DFSRRC00,PARM='ULU,DFSDSG00,,,,,,,,,,,,Y,N'
//STEPLIB  DD DSN=IMS.SDFSRESL,DISP=SHR
//DFSRESLB DD DSN=IMS.SDFSRESL,DISP=SHR
//SYSPRINT DD SYSOUT=*
//SYSUDUMP DD SYSOUT=*
//IMS      DD DSN=IMS.DBDLIB,DISP=OLD
//SYSIN    DD *
DBD     NAME=HDAMTEST,ACCESS=HDAM,RMNAME=DFSHDC40,SCAN=1,ROOT=100
DATASET DD1=HDAMDD1,DEVICE=3390,SIZE=P,OVFLW=HDAMOVF
SEGM    NAME=CUSTSEG,PARENT=0,BYTES=50,PTR=(TWIN,PAREN,LCHILD)
FIELD   NAME=(CUSTID,SEQ,U),BYTES=10,START=1,TYPE=C
FIELD   NAME=CUSTNAME,BYTES=30,START=11,TYPE=C
SEGM    NAME=ORDSEG,PARENT=CUSTSEG,BYTES=30,PTR=(TWIN)
FIELD   NAME=(ORDERNO,SEQ),BYTES=8,START=1,TYPE=P
FIELD   NAME=ORDERDT,BYTES=7,START=9,TYPE=C
DBDGEN
FINISH
/*
//HDAMDD1  DD DSN=YOUR.IMS.HDAMDB.DATA,DISP=OLD,UNIT=SYSDA,VOL=SER=VOL001
//HDAMOVF  DD DSN=YOUR.IMS.HDAMDB.OVFL,DISP=OLD,UNIT=SYSDA,VOL=SER=VOL001
```

---

**Disclaimer**: This document provides a general overview and examples. Specific IMS versions, configurations, and database requirements may necessitate different parameters or additional steps. Always consult your organization's IMS documentation and best practices.
```

Here's an image illustrating the conceptual flow of IMS DBDGEN, ACBGEN, and how they relate to the IMS system components.

